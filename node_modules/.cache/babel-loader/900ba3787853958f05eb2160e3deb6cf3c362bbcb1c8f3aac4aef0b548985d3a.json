{"ast":null,"code":"var _jsxFileName = \"/Users/omariftikhar/Desktop/Zoo-Database/Zoo-Database/zoo-db/zoo-website/src/components/EnclosureReport/EnclosureReport.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EnclosureReport() {\n  _s();\n  const [enclosureType, setEnclosureType] = useState('');\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    // Here you can console log enclosureType or send it to the backend\n    console.log(\"Enclosure Type: \", enclosureType);\n\n    // You can also send enclosureType to the backend for further processing\n    // Example: sendDataToBackend(enclosureType);\n\n    // Display a message to the user (you can remove this in production)\n    alert('Report generated successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Zoo Enclosure Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"enclosureType\",\n        children: \"Enclosure Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"enclosureType\",\n        value: enclosureType,\n        onChange: event => setEnclosureType(event.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Report on Cleaning Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(EnclosureReport, \"GWcDxomQbbmvesmOUSe4wHtLg8M=\");\n_c = EnclosureReport;\nexport default EnclosureReport;\nvar _c;\n$RefreshReg$(_c, \"EnclosureReport\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EnclosureReport","_s","enclosureType","setEnclosureType","handleFormSubmit","event","preventDefault","console","log","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/omariftikhar/Desktop/Zoo-Database/Zoo-Database/zoo-db/zoo-website/src/components/EnclosureReport/EnclosureReport.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction EnclosureReport() {\n  const [enclosureType, setEnclosureType] = useState('');\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    // Here you can console log enclosureType or send it to the backend\n    console.log(\"Enclosure Type: \", enclosureType);\n\n    // You can also send enclosureType to the backend for further processing\n    // Example: sendDataToBackend(enclosureType);\n\n    // Display a message to the user (you can remove this in production)\n    alert('Report generated successfully!');\n  };\n\n  return (\n    <div>\n      <h2>Zoo Enclosure Report</h2>\n      <form onSubmit={handleFormSubmit}>\n        <label htmlFor=\"enclosureType\">Enclosure Type:</label>\n        <input\n          type=\"text\"\n          id=\"enclosureType\"\n          value={enclosureType}\n          onChange={(event) => setEnclosureType(event.target.value)}\n          required\n        />\n        <button type=\"submit\">Generate Report on Cleaning Schedules</button>\n      </form>\n    </div>\n  );\n}\n\nexport default EnclosureReport;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMO,gBAAgB,GAAIC,KAAK,IAAK;IAClCA,KAAK,CAACC,cAAc,CAAC,CAAC;;IAEtB;IACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,aAAa,CAAC;;IAE9C;IACA;;IAEA;IACAO,KAAK,CAAC,gCAAgC,CAAC;EACzC,CAAC;EAED,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7Bf,OAAA;MAAMgB,QAAQ,EAAEX,gBAAiB;MAAAM,QAAA,gBAC/BX,OAAA;QAAOiB,OAAO,EAAC,eAAe;QAAAN,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtDf,OAAA;QACEkB,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,eAAe;QAClBC,KAAK,EAAEjB,aAAc;QACrBkB,QAAQ,EAAGf,KAAK,IAAKF,gBAAgB,CAACE,KAAK,CAACgB,MAAM,CAACF,KAAK,CAAE;QAC1DG,QAAQ;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFf,OAAA;QAAQkB,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAqC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACb,EAAA,CAhCQD,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AAkCxB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}